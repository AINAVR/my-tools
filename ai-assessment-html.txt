<div id="ai-assessment-root"></div>

<style>
    /* Basic Styling - Adjust this to match your website's theme or use Tailwind CSS if globally enabled */
    body { /* Note: This body style might affect your whole page. Consider scoping it to #ai-assessment-root */
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0; /* Remove padding from body as it's within a specific div */
        background-color: transparent; /* Make background transparent to blend with your page */
        color: #333;
    }
    .assessment-container {
        background: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        max-width: 800px;
        width: 100%;
        margin: 20px auto; /* Center the container */
        box-sizing: border-box; /* Include padding/border in element's total width/height */
    }
    h2 {
        color: #2c3e50;
        text-align: center;
        margin-bottom: 30px;
        font-size: 1.8em;
    }
    .form-section, .results-section {
        margin-bottom: 25px;
        border-bottom: 1px solid #eee;
        padding-bottom: 25px;
    }
    .form-section:last-child, .results-section:last-child {
        border-bottom: none;
        padding-bottom: 0;
    }
    .form-group {
        margin-bottom: 15px;
    }
    label {
        display: block;
        margin-bottom: 8px;
        font-weight: bold;
        color: #555;
        font-size: 0.95em;
    }
    input[type="number"], select {
        width: calc(100% - 20px);
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 1em;
        box-sizing: border-box;
        transition: border-color 0.3s;
    }
    input[type="number"]:focus, select:focus {
        border-color: #007bff;
        outline: none;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
    }
    .results-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    .result-card {
        background-color: #f0f8ff;
        padding: 20px;
        border-radius: 10px;
        border: 1px solid #d0e8ff;
        text-align: center;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }
    .result-card h3 {
        margin-top: 0;
        color: #007bff;
        font-size: 1.1em;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }
    .result-card p {
        font-size: 1.6em;
        font-weight: bold;
        color: #333;
    }
    .result-card p small {
        font-size: 0.6em;
        font-weight: normal;
        color: #777;
        display: block;
        margin-top: 5px;
    }
    .icon {
        display: inline-block;
        width: 20px;
        height: 20px;
        vertical-align: middle;
        margin-right: 5px;
        color: #007bff;
    }
    .result-card-cost {
        background-color: #fff3e0;
        border-color: #ffe0b2;
    }
    
    .result-card-savings {
        background-color: #e8f5e9;
        border-color: #c8e6c9;
    }

    @media (max-width: 600px) {
        .assessment-container {
            padding: 15px;
            margin: 10px auto;
        }
        .results-grid {
            grid-template-columns: 1fr;
        }
        h2 {
            font-size: 1.5em;
        }
    }
</style>

<script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

<script type="text/babel">
    const { useState, useEffect } = React;

    const industryPresets = {
        dental: {
            name: 'Dental Front Office',
            avgHourlyWage: 18,
            callVolume: { outbound: 25, inbound: 40, avgDuration: 4 }
        },
        realestate: {
            name: 'Real Estate',
            avgHourlyWage: 22,
            callVolume: { outbound: 50, inbound: 30, avgDuration: 6 }
        },
        healthcare: {
            name: 'Healthcare',
            avgHourlyWage: 20,
            callVolume: { outbound: 20, inbound: 60, avgDuration: 5 }
        },
        recruitment: {
            name: 'Recruitment',
            avgHourlyWage: 25,
            callVolume: { outbound: 40, inbound: 20, avgDuration: 8 }
        },
        education: {
            name: 'Education',
            avgHourlyWage: 19,
            callVolume: { outbound: 15, inbound: 35, avgDuration: 6 }
        },
        spa: {
            name: 'Spa & Wellness',
            avgHourlyWage: 16,
            callVolume: { outbound: 10, inbound: 25, avgDuration: 3 }
        },
        gym: {
            name: 'Gym & Fitness',
            avgHourlyWage: 17,
            callVolume: { outbound: 20, inbound: 30, avgDuration: 4 }
        },
        receptionist: {
            name: 'General Receptionist',
            avgHourlyWage: 15,
            callVolume: { outbound: 15, inbound: 45, avgDuration: 4 }
        },
        restaurant: {
            name: 'Restaurant',
            avgHourlyWage: 14,
            callVolume: { outbound: 5, inbound: 50, avgDuration: 2 }
        },
        loans: {
            name: 'Loan Agents',
            avgHourlyWage: 28,
            callVolume: { outbound: 60, inbound: 25, avgDuration: 10 }
        }
    };

    function AssessmentTool() {
        const [formData, setFormData] = useState({
            industry: '',
            outboundCalls: 0,
            outboundDuration: 0,
            inboundCalls: 0,
            inboundDuration: 0,
            hourlyWage: 0,
            workingDaysPerMonth: 22
        });

        const [results, setResults] = useState({
            monthlyCallTime: 0,
            monthlyCost: 0,
            aiEfficiency: 85,
            aiFixedMonthlyCost: 100,
            aiVariableMonthlyCost: 0,
            totalAiMonthlyCost: 100,
            monthlyNetSavings: 0,
            yearlyNetSavings: 0,
            roiMonths: 0
        });

        const handleIndustryChange = (event) => {
            const industry = event.target.value;
            const preset = industryPresets[industry];
            if (preset) {
                setFormData(prev => ({
                    ...prev,
                    industry,
                    outboundCalls: preset.callVolume.outbound,
                    outboundDuration: preset.callVolume.avgDuration,
                    inboundCalls: preset.callVolume.inbound,
                    inboundDuration: preset.callVolume.avgDuration,
                    hourlyWage: preset.avgHourlyWage
                }));
            } else {
                setFormData(prev => ({ ...prev, industry }));
            }
        };

        const handleChange = (e) => {
            const { name, value, type } = e.target;
            setFormData(prev => ({
                ...prev,
                [name]: type === 'number' ? parseFloat(value) : value
            }));
        };

        const calculateResults = () => {
            // Human metrics
            const totalCallTimeMinutes = (formData.outboundCalls * formData.outboundDuration) + 
                                        (formData.inboundCalls * formData.inboundDuration);
            const dailyCallTimeHours = totalCallTimeMinutes / 60;
            const monthlyCallTimeHours = dailyCallTimeHours * formData.workingDaysPerMonth;
            const monthlyCost = monthlyCallTimeHours * formData.hourlyWage;
            
            // AI metrics
            const aiEfficiency = 0.85; // 85% efficiency for calls
            const aiCostPerMinute = 0.50; // New variable cost per minute
            const aiFixedMonthlyCost = 100; // New fixed monthly cost

            // Savings from call handling automation
            const monthlySavings = monthlyCost * aiEfficiency;

            // Calculate AI-handled minutes for variable cost
            const totalAiCallMinutes = (
                (formData.outboundCalls * formData.outboundDuration) + 
                (formData.inboundCalls * formData.inboundDuration)
            ) * (aiEfficiency / 100) * formData.workingDaysPerMonth;
            
            const aiVariableMonthlyCost = totalAiCallMinutes * aiCostPerMinute;
            const totalAiMonthlyCost = aiFixedMonthlyCost + aiVariableMonthlyCost;

            // Net savings
            const monthlyNetSavings = monthlySavings - totalAiMonthlyCost;
            const yearlyNetSavings = (monthlySavings * 12) - (totalAiMonthlyCost * 12);
            
            // ROI calculation
            let roiMonths = 0;
            if (monthlyNetSavings > 0) {
                roiMonths = Math.ceil(aiFixedMonthlyCost / monthlyNetSavings);
            } else if (monthlyNetSavings <= 0 && aiFixedMonthlyCost > 0) {
                roiMonths = Infinity;
            }

            setResults({
                monthlyCallTime: monthlyCallTimeHours,
                monthlyCost,
                aiEfficiency: aiEfficiency * 100,
                aiFixedMonthlyCost,
                aiVariableMonthlyCost,
                totalAiMonthlyCost,
                monthlyNetSavings,
                yearlyNetSavings,
                roiMonths
            });
        };

        useEffect(() => {
            if (formData.hourlyWage > 0 && formData.workingDaysPerMonth > 0) {
                calculateResults();
            }
        }, [formData]);

        return (
            <div className="assessment-container">
                <h2><span role="img" aria-label="calculator" style={{verticalAlign: 'middle'}}>🧮</span> AI Voice Agent Savings Calculator</h2>
                
                <div className="form-section">
                    <h3>Your Current Operations</h3>
                    <div className="form-group">
                        <label htmlFor="industry">Select Your Industry:</label>
                        <select id="industry" name="industry" value={formData.industry} onChange={handleIndustryChange}>
                            <option value="">-- Select --</option>
                            {Object.keys(industryPresets).map(key => (
                                <option key={key} value={key}>{industryPresets[key].name}</option>
                            ))}
                            <option value="custom">Custom (Enter Manually)</option>
                        </select>
                    </div>
                    <div className="form-group">
                        <label htmlFor="outboundCalls">Daily Outbound Calls:</label>
                        <input type="number" id="outboundCalls" name="outboundCalls" value={formData.outboundCalls} onChange={handleChange} min="0" />
                    </div>
                    <div className="form-group">
                        <label htmlFor="outboundDuration">Avg. Outbound Call Duration (minutes):</label>
                        <input type="number" id="outboundDuration" name="outboundDuration" value={formData.outboundDuration} onChange={handleChange} min="0" step="0.5" />
                    </div>
                    <div className="form-group">
                        <label htmlFor="inboundCalls">Daily Inbound Calls:</label>
                        <input type="number" id="inboundCalls" name="inboundCalls" value={formData.inboundCalls} onChange={handleChange} min="0" />
                    </div>
                    <div className="form-group">
                        <label htmlFor="inboundDuration">Avg. Inbound Call Duration (minutes):</label>
                        <input type="number" id="inboundDuration" name="inboundDuration" value={formData.inboundDuration} onChange={handleChange} min="0" step="0.5" />
                    </div>
                    <div className="form-group">
                        <label htmlFor="hourlyWage">Avg. Hourly Wage ($):</label>
                        <input type="number" id="hourlyWage" name="hourlyWage" value={formData.hourlyWage} onChange={handleChange} min="0" step="0.01" />
                    </div>
                    <div className="form-group">
                        <label htmlFor="workingDaysPerMonth">Working Days per Month:</label>
                        <input type="number" id="workingDaysPerMonth" name="workingDaysPerMonth" value={formData.workingDaysPerMonth} onChange={handleChange} min="1" max="31" />
                    </div>
                </div>

                <div className="results-section">
                    <h3>Potential Savings with AI</h3>
                    <div className="results-grid">
                        <div className="result-card">
                            <h3><span role="img" aria-label="clock" className="icon">⏱️</span> Monthly Call Time</h3>
                            <p>{results.monthlyCallTime.toFixed(1)} <small>hours</small></p>
                        </div>
                        <div className="result-card">
                            <h3><span role="img" aria-label="dollar-sign" className="icon">💲</span> Monthly Human Cost</h3>
                            <p>${results.monthlyCost.toFixed(2)}</p>
                        </div>
                        <div className="result-card">
                            <h3><span role="img" aria-label="trending-up" className="icon">📈</span> AI Efficiency</h3>
                            <p>{results.aiEfficiency}%</p>
                        </div>
                        <div className="result-card result-card-cost">
                            <h3><span role="img" aria-label="gear" className="icon">⚙️</span> AI Fixed Monthly Cost</h3>
                            <p>${results.aiFixedMonthlyCost.toFixed(2)}</p>
                        </div>
                        <div className="result-card result-card-cost">
                            <h3><span role="img" aria-label="phone" className="icon">📞</span> AI Variable Monthly Cost</h3>
                            <p>${results.aiVariableMonthlyCost.toFixed(2)}</p>
                        </div>
                        <div className="result-card result-card-savings">
                            <h3><span role="img" aria-label="money-bag" className="icon">💰</span> Monthly Net Savings</h3>
                            <p>${results.monthlyNetSavings.toFixed(2)}</p>
                        </div>
                        <div className="result-card result-card-savings">
                            <h3><span role="img" aria-label="money-bill" className="icon">💸</span> Yearly Net Savings</h3>
                            <p>${results.yearlyNetSavings.toFixed(2)}</p>
                        </div>
                        <div className="result-card">
                            <h3><span role="img" aria-label="handshake" className="icon">🤝</span> ROI (Months)</h3>
                            <p>
                                {results.roiMonths === Infinity ? 'Never' : results.roiMonths === 0 ? 'N/A' : results.roiMonths}
                            </p>
                        </div>
                    </div>
                </div>

                <div style={{ textAlign: 'center', marginTop: '30px', fontSize: '0.9em', color: '#666' }}>
                    <p>
                        <span role="img" aria-label="info">ℹ️</span> Note: This tool provides an estimate. Actual savings may vary based on specific AI solution, implementation, and operational factors.
                        AI Fixed Cost is a placeholder ($100) and AI variable cost is based on a placeholder rate of $0.50 per minute.
                    </p>
                </div>
            </div>
        );
    }

    // Mount the React component to the div with id 'ai-assessment-root'
    ReactDOM.render(<AssessmentTool />, document.getElementById('ai-assessment-root'));
</script>